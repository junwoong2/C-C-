#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>
#define STACK_SIZE 10

int* stack;
int top = -1;               // top 초기화
int size = 1;

int isEmpty() {
	if (top == -1) return 1;
	else return 0;
}

int isFull() {
	if (top % STACK_SIZE == 9) return 1;
	else return 0;
}

// 스택의 top에 원소를 삽입하는 연산
void push(int item) {
	int* temp;

	if (isFull()) {
		printf(" Full STACK\n");
		temp = (int*)malloc((STACK_SIZE * size) * sizeof(int));

		for (int i = 0; i < (top + 1); i++) temp[i] = stack[i];
		stack = (int*)malloc((STACK_SIZE * (size + 1)) * sizeof(int));

		for (int i = 0; i < (top + 1); i++) stack[i] = temp[i];
		stack[++top] = item;  // top을 증가시킨 후 현재 top에 원소 삽입

		size++;

		free(temp);

	}
	else stack[++top] = item;  // top을 증가시킨 후 현재 top에 원소 삽입
}

void pop(int n) {
	int cnt = 0;
	int* temp2;
	temp2 = (int*)malloc((STACK_SIZE * size) * sizeof(int));
	if (isEmpty()) {
		printf("Empty Stack\n");
	}
	else {
		for (int i = 0; i < (top + 1); i++) {
			if (stack[i] == n) {
				continue;
			}
			temp2[cnt++] = stack[i];
		}
		for (int i = 0; i < top; i++) {
			stack[i] = temp2[i];
		}
		free(temp2);
	}
}

void insert(int pos, int item) {
	int* temp;

	if (isFull() == 1) {
		printf(" Full STACK\n");
		//int 타입사이즈 * (STACK_SIZE * size) 만큼의 메모리를 할당해라
		temp = (int*)malloc((STACK_SIZE * size) * sizeof(int));
		for (int i = 0; i < (top + 1); i++)
			temp[i] = stack[i];
		stack = (int*)malloc((STACK_SIZE * (size + 1)) * sizeof(int));
		for (int i = 0; i < pos; i++)
			stack[i] = temp[i];
		stack[pos] = item;

		for (int i = pos; i < (top + 1); i++)
			stack[i + 1] = temp[i];
		size++;
		top++;

		free(temp);   //지우기
	}
	else {   //isFull()==0
		temp = (int*)malloc((STACK_SIZE * size) * sizeof(int));
		for (int i = 0; i < (top + 1); i++)
			temp[i] = stack[i];
		for (int i = 0; i < pos; i++)
			stack[i] = temp[i];

		stack[pos] = item;
		for (int i = pos; i < (top + 1); i++)
			stack[i + 1] = temp[i];
		size++;
		top++;

		free(temp);
	}
}


// 스택의 원소를 출력하는 연산
void printStack() {
	int i;
	printf(" STACK SIZE [%d]\n", (STACK_SIZE * size));
	printf("\n STACK [ ");
	for (i = 0; i <= top; i++) printf("%d ", stack[i]);
	printf("]\n");
}

int main(void) {
	int i;
	int n = 0;
	int yn, pos, item;
	stack = (int*)malloc(STACK_SIZE * sizeof(int));
	for (i = 0; i < 44; i++) push(i + 1);
	printStack();

	printf("\n------------pop(0) or insert(1)-----------\n");
	scanf("%d", &yn);

	if (yn == 0) {
		printf("\n-----------pop----------\n");
		printf("제거할 원소를 입력하시오.\n");
		scanf("%d", &n);
		pop(n);
		printStack();
	}
	else {
		printf("\n-----------insert-----------\n");
		printf("(  )번째 입력할 원소 (    )\n");
		scanf("%d %d", &pos, &item);
		insert(pos, item);
		printStack();
	}
	
	free(stack);
	getchar();
}
