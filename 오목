#include

#include

LRESULT CALLBACK WndProc(HWND hwnd, UINT iMsg, 

						 WPARAM wParam, LPARAM lParam);

int WINAPI WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, 

				   LPSTR lpszCmdLine, int nCmdShow)

{

	HWND	 hwnd;

	MSG		 msg;

	WNDCLASS WndClass;   

	WndClass.style = CS_HREDRAW | CS_VREDRAW;

	WndClass.lpfnWndProc = WndProc;		

	WndClass.cbClsExtra	= 0;		

	WndClass.cbWndExtra	= 0;		

	WndClass.hInstance = hInstance;		

	WndClass.hIcon = LoadIcon(NULL, IDI_APPLICATION);

	WndClass.hCursor = LoadCursor(NULL, IDC_ARROW);	

	WndClass.hbrBackground = (HBRUSH)GetStockObject(WHITE_BRUSH);	

	WndClass.lpszMenuName = NULL;		

	WndClass.lpszClassName = _T("Window Class Name");	

	RegisterClass(&WndClass);	

	hwnd = CreateWindow(_T("Window Class Name"),

		_T("Window Title Name"),

		WS_OVERLAPPEDWINDOW,

		CW_USEDEFAULT,	

		CW_USEDEFAULT,	

		CW_USEDEFAULT,	

		CW_USEDEFAULT,	

		NULL,	

		NULL,	

		hInstance,	

		NULL	 

	);

	ShowWindow(hwnd, nCmdShow);

	UpdateWindow(hwnd);

	while (GetMessage(&msg, NULL, 0, 0))

	{

		TranslateMessage(&msg);	

		DispatchMessage(&msg);	

	}   

	return (int)msg.wParam;

}



LRESULT CALLBACK WndProc(HWND hwnd, UINT iMsg, 

						 WPARAM wParam, LPARAM lParam)

{

	HDC			hdc;

	PAINTSTRUCT	ps; 

	static int radius2 = 100;

	static int	dx, dy;

	static int	cx, cy;

	static bool isClick = false;

	

	switch (iMsg) 

	{

	case WM_CREATE:

		break;

	case WM_PAINT:

		hdc = BeginPaint(hwnd, &ps);

		for (int i = 0; i < 5; i++) {

			MoveToEx(hdc, radius2 * (i + 1), 0, NULL); 

			LineTo(hdc, radius2 * (i + 1), radius2 * 5);

		}



		for (int i = 0; i < 5; i++) {

			MoveToEx(hdc, 0, radius2 * (i + 1), NULL); 

			LineTo(hdc, radius2 * 5, radius2 * (i + 1));

		}



		if (isClick) {

			Ellipse(hdc, cx - 50, cy - 50, cx + 50, cy + 50);

			isClick = false;

		}



		EndPaint(hwnd, &ps);

		break; 

	case WM_LBUTTONDOWN:

		dx = LOWORD(lParam);

		dy = HIWORD(lParam);

		cx = radius2 * (dx / radius2) + radius2 / 2;

		cy = radius2 * (dy / radius2) + radius2 / 2;

		isClick = true;

		InvalidateRgn(hwnd, NULL, TRUE);

		break;

	case WM_DESTROY:

		PostQuitMessage(0);

		break;

	}

	return(DefWindowProc(hwnd, iMsg, wParam, lParam));

}
